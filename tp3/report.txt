Exercice 1:

Question 1 :
			The variable in the main function is an array of ID of threads. The space of this variable is allocated thanks to a malloc and initialized thanks to a pthread_create. We first have to do pthread_join so that we wait for the end of all threads. Then, we free at end the array.

Question 2 :
			The threads are created thanks to the pthread_create function. This function needs at least 4 arguments :
			- We need one pthread_t, the id of the thread.
			- We can give attributes to the thread we are creating. If you put NULL, it take the default attributes.
			- We need a pointer to the function that should be run by the thread.
			- All the needed arguments to this function.

Question 3 :	
			When usleep is called, the program will paused/blocked for a random microsecondes. When this function is called, the thread is in a waiting state. The order of the messages printed by the supporter threadsis not the same as the order of the creation of the threads.

Question 4 :
			The pthread_join() function waits for the thread specified to terminate. That means we have to wait the end of all threads to free the tids array. If the developer forgets the last loop in the main function, all threads won't have enough time to finish its execution. For example, in the program, we free the array before the end of the print of the song.


Exercice 2:


